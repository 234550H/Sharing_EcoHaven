const express = require('express');
const router = express.Router();
const db = require('../models');
const multer = require('multer');
const fs = require('fs');
const path = require('path');

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');  // Destination folder for uploaded files
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);  // Unique filename
  }
});

const upload = multer({ storage: storage });

// POST endpoint to create a new event with file upload
router.post('/events', upload.single('eventPicture'), async (req, res) => {
  const { eventName, activity, location, organization, startDate, endDate, startEndTime, description, amount } = req.body;
  const eventPicture = req.file;  // Uploaded file (event picture)

  try {
    // Handle file upload if exists
    let pictureUrl = null;
    if (eventPicture) {
      pictureUrl = eventPicture.path;  // Save the file path to the database
    }

    // Create new event in database
    const newEvent = await db.Event.create({
      eventName,
      activity,
      location,
      organization,
      startDate,
      endDate,
      startEndTime,
      description,
      amount,
      pictureUrl
    });

    res.status(201).json({ message: 'Event created successfully', event: newEvent });
  } catch (err) {
    console.error('Error creating event:', err);
    res.status(500).json({ error: 'Failed to create event' });
  }
});

// GET all events
router.get('/events', async (req, res) => {
  try {
    const events = await db.Event.findAll();
    res.json(events);
  } catch (err) {
    console.error('Error fetching events:', err);
    res.status(500).json({ error: 'Failed to fetch events' });
  }
});

// GET event by ID
router.get('/events/:eventId', async (req, res) => {
  const eventId = req.params.eventId;

  try {
    const event = await db.Event.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: 'Event not found' });
    }
    res.json(event);
  } catch (err) {
    console.error('Error fetching event by ID:', err);
    res.status(500).json({ error: 'Failed to fetch event' });
  }
});

// PUT update an event by ID
router.put('/events/:eventId', upload.single('eventPicture'), async (req, res) => {
  const eventId = req.params.eventId;
  const { eventName, activity, location, organization, startDate, endDate, startEndTime, description, amount } = req.body;

  try {
    // Find the event by ID
    let event = await db.Event.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: 'Event not found' });
    }

    // Handle file upload if exists
    if (req.file) {
      // Remove existing picture file if any
      if (event.pictureUrl) {
        fs.unlinkSync(path.join(__dirname, '..', event.pictureUrl));
      }
      // Update pictureUrl with new file path
      event.pictureUrl = req.file.path;
    }

    // Update event data
    event.eventName = eventName;
    event.activity = activity;
    event.location = location;
    event.organization = organization;
    event.startDate = startDate;
    event.endDate = endDate;
    event.startEndTime = startEndTime;
    event.description = description;
    event.amount = amount;

    // Save the updated event
    await event.save();

    res.json({ message: 'Event updated successfully', event });
  } catch (err) {
    console.error('Error updating event:', err);
    res.status(500).json({ error: 'Failed to update event' });
  }
});

// DELETE an event by ID
router.delete('/events/:eventId', async (req, res) => {
  const eventId = req.params.eventId;

  try {
    // Find the event by ID
    const event = await db.Event.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: 'Event not found' });
    }

    // Delete the event
    await event.destroy();

    // Remove the associated picture file if any
    if (event.pictureUrl) {
      fs.unlinkSync(path.join(__dirname, '..', event.pictureUrl));
    }

    res.json({ message: 'Event deleted successfully' });
  } catch (err) {
    console.error('Error deleting event:', err);
    res.status(500).json({ error: 'Failed to delete event' });
  }
});

module.exports = router;
