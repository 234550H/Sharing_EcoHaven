const express = require('express');
const router = express.Router();
const db = require('../models');
const { Op } = require('sequelize');

// Route for creating events
router.post('/', async (req, res) => {
  const { activity, location, organization, startDate, endDate, startEndTime, description, amount } = req.body;

  try {
    // Create the event in the database
    const newEvent = await db.Event.create({
      activity,
      location,
      organization,
      startDate,
      endDate,
      startEndTime,
      description,
      amount
    });

    res.status(201).json({ message: 'Event created successfully', event: newEvent });
  } catch (err) {
    console.error('Error creating event:', err);
    res.status(500).json({ error: 'Failed to create event', details: err.message });
  }
});

// Route for retrieving all events
router.get('/events', async (req, res) => {
  try {
    const events = await db.Event.findAll();
    res.status(200).json(events);
  } catch (err) {
    console.error('Error fetching events:', err);
    res.status(500).json({ error: 'Failed to fetch events' });
  }
});

//http://localhost:5000/api/event/events/2
// Route for retrieving a single event by eventId
router.get('/events/:eventId', async (req, res) => {
  const eventId = req.params.eventId;

  try {
    const event = await db.Event.findByPk(eventId);

    if (!event) {
      return res.status(404).json({ error: `Event with ID ${eventId} not found` });
    }

    res.status(200).json(event);
  } catch (err) {
    console.error(`Error fetching event with ID ${eventId}:`, err);
    res.status(500).json({ error: 'Failed to fetch event' });
  }
});

// Route for updating an event by eventId
router.put('/events/:eventId', async (req, res) => {
  const eventId = req.params.eventId;
  const { activity, location, organization, startDate, endDate, startEndTime, description, amount } = req.body;

  try {
    let event = await db.Event.findByPk(eventId);

    if (!event) {
      return res.status(404).json({ error: `Event with ID ${eventId} not found` });
    }

    // Update the event attributes
    event = await event.update({
      activity,
      location,
      organization,
      startDate,
      endDate,
      startEndTime,
      description,
      amount
    });

    res.status(200).json({ message: `Event with ID ${eventId} updated successfully`, event });
  } catch (err) {
    console.error(`Error updating event with ID ${eventId}:`, err);
    res.status(500).json({ error: 'Failed to update event' });
  }
});

// Route for deleting an event by eventId
router.delete('/events/:eventId', async (req, res) => {
  const eventId = req.params.eventId;

  try {
    const event = await db.Event.findByPk(eventId);

    if (!event) {
      return res.status(404).json({ error: `Event with ID ${eventId} not found` });
    }

    // Delete the event
    await event.destroy();

    res.status(200).json({ message: `Event with ID ${eventId} deleted successfully` });
  } catch (err) {
    console.error(`Error deleting event with ID ${eventId}:`, err);
    res.status(500).json({ error: 'Failed to delete event' });
  }
});



module.exports = router;
